{"version":3,"sources":["components/settings/Settings.js","components/clock/Clock.js","components/controller/Controller.js","App.js","serviceWorker.js","index.js"],"names":["Settings","props","className","id","onClick","decreaseBreak","breakLength","increaseBreak","decreaseSession","sessionLength","increaseSession","Clock","this","timeLabel","timeLeftInSecond","minute","Math","floor","second","formatTime","Component","Controller","startStop","hasStarted","reset","App","state","setState","timerInterval","audioBeep","current","pause","currentTime","clearInterval","setInterval","decreasTimer","phaseControl","play","React","createRef","preload","src","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c425d86.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './settings.css';\n\nfunction Settings(props) {\n      \n    return (\n      <div className = \"settings\">\n        <div className = \"settings-section\">\n          <label id = \"break-label\">Break Length</label>\n          <div>\n            <button  id = \"break-decrement\" onClick = { props.decreaseBreak}>-</button>\n            <span id=\"break-length\">{props.breakLength}</span>\n            <button id = \"break-increment\" onClick = { props.increaseBreak}>+</button>\n          </div>\n        </div>\n        <div className = \"settings-section\">\n          <label id = \"session-label\">Session Length</label>\n          <div>\n            <button id = \"session-decrement\" onClick = { props.decreaseSession }>-</button>\n            <span id=\"session-length\">{props.sessionLength}</span>\n            <button id = \"session-increment\" onClick = { props.increaseSession }>+</button>\n          </div>\n        </div>\n      </div>\n  )\n}\n\n\nexport default Settings","import React, { Component } from 'react'\nimport './clock.css'\n  \nclass Clock extends Component {\n    render() {\n\n    const formatTime = (timeLeftInSecond) => {\n        let minute = Math.floor(timeLeftInSecond / 60);\n        if (minute < 10) minute = '0' + minute;\n  \n        let second = timeLeftInSecond - 60 * minute;\n        if (second < 10) second = '0' + second;\n  \n        return `${minute}:${second}`;\n    }\n      return (\n        <div className = \"clock\">\n          <div className = \"clock-content\">\n            <label id = \"clock-label\">{ this.props.timeLabel }</label>\n            <span id = \"clock-left\">{ formatTime(this.props.timeLeftInSecond) }</span>\n          </div>\n        </div>\n      )\n    }\n}\n\nexport default Clock","import React from 'react'\nimport './controller.css'\n\nfunction Controller(props) {\n\n    return(\n        <div className = 'controller'>\n            <button className = 'start-stop-button' onClick = {props.startStop} >\n                { props.hasStarted ? 'Stop' : 'Start' }\n            </button>\n            <button className = 'reset' onClick = { props.reset }>\n                Reset\n            </button>\n        </div>\n    )\n\n}\n\nexport default Controller","import React from 'react';\nimport './style.css'\n\nimport Settings from './components/settings/Settings';\nimport Clock from './components/clock/Clock'\nimport Controller from './components/controller/Controller'\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n\n    this.audioBeep = React.createRef()\n\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timeLabel: 'Session',\n      timeLeftInSecond: 25 * 60,\n      hasStarted: false,\n      timerInterval: null\n    }\n  }\n\n  increaseBreak = () => {\n    if (this.state.breakLength < 60 && !this.state.hasStarted) {\n      this.setState({\n        breakLength: this.state.breakLength + 1\n      })\n    }\n  }\n\n  decreaseBreak = () => {\n    if (this.state.breakLength > 1 && !this.state.hasStarted) {\n      this.setState({\n        breakLength: this.state.breakLength - 1\n      })\n    }\n  }\n\n  increaseSession = () => {\n    if (this.state.sessionLength < 60 && !this.state.hasStarted) {\n      this.setState({\n        sessionLength: this.state.sessionLength + 1,\n        timeLeftInSecond: (this.state.sessionLength + 1) * 60\n      })\n    }\n  }\n\n  decreaseSession = () => {\n    if (this.state.sessionLength > 1 && !this.state.hasStarted) {\n      this.setState({\n        sessionLength: this.state.sessionLength - 1,\n        timeLeftInSecond: (this.state.sessionLength - 1) * 60\n      })\n    }\n  }\n\n  reset = () => {\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      timeLabel: 'Session',\n      timeLeftInSecond: 25 * 60,\n      hasStarted: false,\n      timerInterval: null\n    })\n\n    this.audioBeep.current.pause()\n    this.audioBeep.current.currentTime = 0\n    this.state.timerInterval && clearInterval(this.state.timerInterval)\n  }\n\n  startStop = () => {\n    if (!this.state.hasStarted) {\n      this.setState({\n        hasStarted: !this.state.hasStarted,\n        timerInterval: setInterval(() => {\n          this.decreasTimer()\n          this.phaseControl()\n        }, 1000)\n      })\n    } else {\n      this.audioBeep.current.pause()\n      this.audioBeep.current.currentTime = 0\n      this.state.timerInterval && clearInterval(this.state.timerInterval)\n\n      this.setState({\n        hasStarted: !this.state.hasStarted,\n        timerInterval: null\n      })\n    }\n  }\n\n  decreasTimer = () => {\n    this.setState({\n      timeLeftInSecond: this.state.timeLeftInSecond - 1\n    })\n  }\n\n  phaseControl = () => {\n    if (this.state.timeLeftInSecond === 0) {\n      this.audioBeep.current.play();\n    } else if (this.state.timeLeftInSecond === -1) {\n      if (this.state.timeLabel === 'Session') {\n        this.setState({\n          timeLabel: 'Break',\n          timeLeftInSecond: this.state.breakLength * 60\n        });\n      } else {\n        this.setState({\n          timeLabel: 'Session',\n          timeLeftInSecond: this.state.sessionLength * 60\n        });\n      }\n    }\n  }\n\n\n  render() {\n    return(\n      <div className = 'pomodoro-container'>\n        <div className = \"header\">\n          <h1>pomodoro clock</h1>  \n        </div>\n        <Settings \n          breakLength = { this.state.breakLength }\n          sessionLength = { this.state.sessionLength }\n          hasStarted = { true }\n          decreaseBreak = { this.decreaseBreak }\n          decreaseSession = { this.decreaseSession}\n          increaseBreak = { this.increaseBreak }\n          increaseSession = { this.increaseSession }\n        />\n\n        <Clock\n          timeLabel = { this.state.timeLabel }\n          timeLeftInSecond = { this.state.timeLeftInSecond }\n        />\n\n        <Controller \n          reset = { this.reset }\n          startStop = { this.startStop }\n          hasStarted={ this.state.hasStarted }\n        />\n\n        <audio id=\"beep\" preload=\"auto\" src=\"https://goo.gl/65cBl1\" ref={this.audioBeep}></audio>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}